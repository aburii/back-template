#!/bin/bash

# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan

usage() {
  echo "Usage: $0 [ -n NAME ]"
}

exit_abnormal() {
  usage
  exit 1
}

while getopts n: flag
do
    case "${flag}" in
        n) lib_name=${OPTARG};;
        :)  echo "Error: -${OPTARG} requires an argument."
            exit_abnormal
            ;;
        a*) exit_abnormal

    esac
done

if [ "${lib_name}" == "" ]; then
    exit_abnormal
fi

cd ../libs || exit ; mkdir "$lib_name" ; cd "$lib_name" || exit;

mkdir "src" ; cd "src" || exit; touch "$lib_name.module.ts" && touch "$lib_name.service.ts"
cd ..

touch "package.json"
echo "{
  \"name\": \"@app/$lib_name\",
  \"version\": \"0.0.1\",
  \"main\": \"dist/index.js\",
  \"license\": \"UNLICENSED\",
  \"private\": true,
  \"scripts\": {
    \"build\": \"tsc\",
    \"build:watch\": \"tsc --watch\",
    \"test\": \"jest\",
    \"test:watch\": \"jest --watch\",
    \"test:cov\": \"jest --coverage\"
  },
  \"dependencies\": {
    \"@nestjs/common\": \"^8.0.0\",
    \"@nestjs/config\": \"^2.2.0\",
    \"@nestjs/core\": \"^8.0.0\",
    \"@nestjs/platform-express\": \"^8.0.0\",
    \"@nestjs/typeorm\": \"^9.0.1\",
    \"@types/jest\": \"^29.2.2\",
    \"@types/js-yaml\": \"^4.0.5\",
    \"class-transformer\": \"^0.5.1\",
    \"class-validator\": \"^0.13.2\",
    \"jest\": \"^29.3.1\",
    \"js-yaml\": \"^4.1.0\",
    \"reflect-metadata\": \"^0.1.12\",
    \"rimraf\": \"^3.0.2\",
    \"rxjs\": \"^7.2.0\",
    \"ts-jest\": \"^29.0.3\",
    \"typeorm\": \"^0.3.10\"
  },
  \"devDependencies\": {
    \"@nestjs/cli\": \"^7.6.0\",
    \"@nestjs/schematics\": \"^7.3.0\",
    \"@nestjs/testing\": \"^7.6.15\",
    \"@types/express\": \"^4.17.11\",
    \"@types/node\": \"^14.14.36\",
    \"@types/supertest\": \"^2.0.10\",
    \"@typescript-eslint/eslint-plugin\": \"^4.19.0\",
    \"@typescript-eslint/parser\": \"^4.19.0\",
    \"eslint\": \"^7.22.0\",
    \"eslint-config-prettier\": \"^8.1.0\",
    \"eslint-plugin-prettier\": \"^3.3.1\",
    \"prettier\": \"^2.2.1\",
    \"supertest\": \"^6.1.3\",
    \"ts-loader\": \"^8.0.18\",
    \"ts-node\": \"^9.1.1\",
    \"tsconfig-paths\": \"^3.9.0\",
    \"typescript\": \"^4.2.3\"
  }
}" > "package.json"
echo -e "${Green}[Created] ${Color_Off}package.json"

touch tsconfig.json
echo "{
  \"compilerOptions\": {
    \"module\": \"commonjs\",
    \"declaration\": true,
    \"removeComments\": true,
    \"emitDecoratorMetadata\": true,
    \"experimentalDecorators\": true,
    \"allowSyntheticDefaultImports\": true,
    \"target\": \"es2017\",
    \"sourceMap\": true,
    \"outDir\": \"dist\",
    \"baseUrl\": \"./\",
    \"incremental\": true
  },
  \"exclude\": [
    \"dist\",
    \"node_modules\",
    \"types\"
  ]
}" > "tsconfig.json"
echo -e "${Green}[Created] ${Color_Off}tsconfig.json"

touch ".gitignore"
echo "# compiled output
/dist
/node_modules

# Logs
logs
*.log
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS
.DS_Store

# Tests
/coverage
/.nyc_output

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json" > ".gitignore"
echo -e "${Green}[Created] ${Color_Off}.gitignore"

touch ".eslintrc.js"
echo "module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
  project: 'tsconfig.json',
  sourceType: 'module',
  },
  plugins: ['@typescript-eslint/eslint-plugin'],
  extends: [
    'plugin:@typescript-eslint/recommended',
  ],
  root: true,
  env: {
    node: true,
    jest: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
  },
};" > ".eslintrc.js"
echo -e "${Green}[Created] ${Color_Off}eslintrc.js"

touch "index.ts"
echo "export * from \"./src/$lib_name.module.ts\"" > "index.ts"
echo -e "${Green}[Created] ${Color_Off}index.ts"

touch "jest.config.json"
echo "{
  \"moduleFileExtensions\": [\"js\", \"json\", \"ts\"],
  \"rootDir\": \".\",
  \"testEnvironment\": \"node\",
  \"testRegex\": \".spec(-integration)?.ts$\",
  \"transform\": {
  \"^.+\\\.ts$\": \"ts-jest\"
  }
}" > "jest.config.json"
echo -e "${Green}[Created] ${Color_Off}jest.config.json"

yarn install
git add .
