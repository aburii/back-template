[[{"l":"Getting Started"},{"l":"Prerequisites","p":["I suggest that you install NestJS Framework","⚠️ Read NestJS documentation if you are new to this framework","If you do not have yarn installed npm install --global yarn."]},{"l":"First steps"},{"l":"Installation","p":["In order to install packages run yarn install."]},{"l":"Environment","p":["Create a .env file following the .env.example file, this will allow you to have the application running.","Create a .env.db file following its .env.db.example file, this will allow you to have the configs for the database."]},{"l":"Run the API","p":["In order to run the API with its database run docker compose up."]}],[{"l":"Authentication"},{"l":"Logic","p":["Authentication module gathers all the logic from registering users to logging them out. This gathers verification too through tokens sent by email."]},{"l":"Endpoints"},{"l":"Public Routes"},{"i":"post-register","l":"POST /register"},{"l":"Body"},{"l":"Response"},{"i":"post-login","l":"POST /login"},{"i":"body-1","l":"Body"},{"i":"response-1","l":"Response"},{"l":"Protected Routes","p":["Taking the access_token object as Bearer Token in the Authentication Header section."]},{"i":"post-logout","l":"POST /logout","p":["Logs out the user by deleting its refresh_token in the DB."]},{"i":"post-verify","l":"POST /verify","p":["ℹ️ User must NOT be verified","Verifies the code sent by email to the users.","Grants user more permission on success"]},{"i":"body-2","l":"Body"},{"i":"response-2","l":"Response"},{"i":"post-redeem-verification-code","l":"POST /redeem-verification-code","p":["ℹ️ User must NOT be verified","Sends an email with verification code"]},{"i":"post-refresh","l":"POST /refresh","p":["⚠️ Takes the refresh token as Bearer Token in the Authentication Header"]},{"i":"response-3","l":"Response"}],[{"l":"CRUD"},{"l":"Logic","p":["This module gathers CRUD logic"]},{"l":"Endpoints"},{"l":"Protected Routes"},{"i":"get-","l":"GET /","p":["You have the freedom to select the hashed fields or not."]},{"l":"Response"},{"i":"get-id","l":"GET /:id"},{"i":"response-1","l":"Response","p":["You have the freedom to select the hashed fields or not."]},{"i":"patch-id","l":"PATCH /:id","p":["ℹ️ User must be verified"]},{"l":"Body","p":["Check UpdateUserDto class"]},{"i":"response-2","l":"Response","p":["Empty on success"]},{"i":"patch-idpassword","l":"PATCH /:id/password","p":["ℹ️ User must be verified"]},{"i":"body-1","l":"Body","p":["Check UpdatePasswordDto class"]},{"i":"response-3","l":"Response","p":["Empty on success"]},{"i":"delete-id","l":"DELETE /:id","p":["ℹ️ User must be verified"]},{"i":"response-4","l":"Response"}],[{"l":"JWT","p":["I used JWT as authentication method with Passport.js"]},{"l":"Refresh tokens","p":["This template uses refresh tokens that are stored in DB. This is a multipurpose functionality that seemed pretty basic."]}],[{"l":"Mailer","p":["The mailer that is proposed by this template serves for accounts verification. To set up the mailer config, look at the .env file at the root of the repository.","Be careful, you need to enable SMTP protocol to your email address."]}],[{"l":"Users"},{"i":"base-approach-of-users","l":"Base approach of 'users'","p":["Users' approach differs on every application. This template only set-ups the minimum logic it needs.","Therefore, its entity only has email, password, and a is_verified field that I will explain in further chapters. You don't need to worry about other fields."]},{"i":"update-users-shape","l":"Update user's shape","p":["If you want to touch the shape of the user entity, go to the entities/user/*.entity file.","Be careful! if you change the object check out the Data Transfer Objects (dto)."]}],[{"l":"Verification","p":["Verification is used to verify users in order to allow them to pursue some requests."]}]]